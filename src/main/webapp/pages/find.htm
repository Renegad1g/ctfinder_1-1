<div id="find-container" class="container">
	<div class="row flex">
		<div class="col s1 valign-wrapper">
			<ul id="slide-out" class="sidenav">
				<li>
					<ul class="collapsible">
						<li>
							<div class="collapsible-header">
								<i class="material-icons">list</i>Категории
							</div>
							<div class="collapsible-body">
								<form id="categories" action="#">
									<!-- <p>
										<label for="category-1"> <input id="category-1"
											type="checkbox" /><span>волонтерская помощь</span>
										</label>
									</p>
									<p>
										<label> <input type="checkbox" /> <span>дизайн</span>
										</label>
									</p>
									<p>
										<label> <input type="checkbox" /> <span>естественные
												науки</span>
										</label>
									</p>
									<p>
										<label> <input type="checkbox" /> <span>помощь
												животным</span>
										</label>
									</p>
									<p>
										<label> <input type="checkbox" /> <span>природа</span>
										</label>
									</p>
									<p>
										<label> <input type="checkbox" /> <span>проектирование
												техники</span>
										</label>
									</p>
									<p>
										<label> <input type="checkbox" /> <span>промышленность</span>
										</label>
									</p>
									<p>
										<label> <input type="checkbox" /> <span>разработка
												приложений</span>
										</label>
									</p>
									<p>
										<label> <input type="checkbox" /> <span>общественные
												науки</span>
										</label>
									</p> -->
								</form>
							</div>
						</li>
						<li>
							<div class="collapsible-header">
								<i class="material-icons">filter_list</i>Фильтр
							</div>
							<div class="collapsible-body">
								<form id="filters" action="#">
									<div class="row">
										 <div class="col s12">
										 	<div class="row">
												<div class="input-field col s12">
													<i class="material-icons prefix">place</i>
													<input type="text" id="country-input" class="autocomplete" autocomplete="off" placeholder="country">
													<label for="country-input">Страна</label>
												</div>
											</div>
										</div>
									</div>
									<div class="row">
										<div class="col s12">
										 	<div class="row">
												<div class="input-field col s12">
													<i class="material-icons prefix">place</i>
													<input type="text" id="city-input" class="autocomplete" autocomplete="off" placeholder="city">
													<label for="city-input">Город</label>
												</div>
											</div>
										</div>
									</div>
									<div class="row">
										<div class="col s12">
										 	<div class="row">
												<div class="input-field col s6">
													<input type="number" id="c-count-input" min="1" placeholder="&infin;" value="">
													<label for="c-count-input">Вакантных мест</label>
												</div>
												<div class="input-field col s6">
													<p>
														<label>
															<input id="c-count-on-off" type="checkbox" />
															<span>On / Off</span>
														</label>
													 </p>
												</div>
											</div>
										</div>
									</div>
								</form>
							</div>
						</li>
						<li>
							<div class="collapsible-header">
								<i class="material-icons">sort</i>Сортировка
							</div>
							<div class="collapsible-body">
								<form  id="order-rules" action="#">
									<p>
										<label> <input id="sort-created-desc" name="sort-group" type="radio" checked="checked" />
											<span>сначала новые по дате создания</span>
										</label>
									</p>
									<p>
										<label> <input  id="sort-created-asc" name="sort-group" type="radio" />
											<span>сначала старые по дате создания</span>
										</label>
									</p>
									<p>
										<label> <input id="sort-urgency-asc" name="sort-group" type="radio" /> <span>от
												краткосрочных к длительным</span>
										</label>
									</p>
									<p>
										<label> <input id="sort-urgency-desc" name="sort-group" type="radio" /> <span>от
												длительных к краткосрочным</span>
										</label>
									</p>
									<p>
										<label> <input id="sort-start-asc" name="sort-group" type="radio" /> <span>сначала ближайшие по дате старта</span>
										</label>
									</p>
									<p>
										<label> <input id="sort-start-desc" name="sort-group" type="radio" /> <span>сначала позднейшие по дате старта</span>
										</label>
									</p>
									<p>
										<label> <input id="sort-finish-asc" name="sort-group" type="radio" /> <span>сначала ближайшие по дате окончания</span>
										</label>
									</p>
									<p>
										<label> <input id="sort-finish-desc" name="sort-group" type="radio" /> <span>сначала позднейшие по дате окончания</span>
										</label>
									</p>
								</form>
							</div>
						</li>
					</ul>
				</li>
			</ul>
			<a href="#" data-target="slide-out" class="sidenav-trigger"><i
				class="material-icons" style="pointer-events: none">settings</i></a>
		</div>
		<div class="col s11">
			<div class="row">
				<form id="search-form" class="col s12">
					<div class="input-field">
						<i class="material-icons prefix">search</i>
						<input id="search" class="autocomplete" autocomplete="off" type="text" placeholder="поиск по заголовкам" required>
						<!-- <label class="label-icon" for="search">поиск по заголовкам</label> -->
					</div>
				</form>
			</div>
			<div class="row">
				<div class="col s6">
					<form>
						<label for="calendarFrom"> Начиная с: </label>
						<input id="calendarFrom" name="calendarFrom" type="text" class="datepicker"> </input>
					</form>
				</div>
				<div class="col s6">
					<form>
						<label for="calendarTo"> по: </label>
						<input id="calendarTo" name="calendarTo" type="text" class="datepicker"> </input>
					</form>
				</div>
			</div>
		</div>
	</div>
	<!-- Сюда при помощи jquery помещается шаблон grid, заполненный данными offers -->
	<div class="row">
		<div class="col s12 m12 l12 xl12">
			<div id="offer-grid-container">
				<div class="row flex"></div>
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col s12 m12 l12 xl12">
			<img id="pointer-down" src="../img/pointer_down.gif" alt="pointer down">
		</div>
	</div>
	<div>
		<div id="offer-details" class="modal">
			<div class="modal-content">
			    
			</div>
			<div class="modal-footer">
				<a href="#!" class="modal-action modal-close waves-effect waves-green btn-flat">Ok</a>
			</div>
		</div>	
	</div>
</div>
<script type="text/javascript">
	
	//TODO 1. complete settings: categories, filters
	//TODO 2. complete details: collaborators_count, desired_start_date, desired_finish_date
	//TODO 3. fix destroying of date fields in new offer form, fix dates comparing, fix card titles color
	//+ refreash offers table after status changed, tooltips
	//+ preloader off on external sign out was finished
	//+ add validator "if city presents then country must present"
	//+ prevent default form submit event (on keypress) 
	//+ add more offer types
	//+ delete button
	//+ show only active offers in the grid
	//+ unsubscribe refernce in mails
	//+ flag if the page is already localized
	//+ categories filter handler
	//TODO 4. complete multylang v1
	
	//TODO add. 1: create translations for own offers
	//TODO add. 2: localized example images
	//TODO add. 3: switch search autocomplete title/content
	
	//активируем модальное окно, боковую панель и схлопывающиеся области
	$('.sidenav').sidenav();
	$('.collapsible').collapsible();
	$('#find-container .modal').modal();
	/*$('#find-container .modal').modal(
		onOpenStart: function() { 
			
		}
	);*/
	//Определяем текущую дату
	var nowDate = new Date();
	//Устанавливаем в элементы ввода Дата (Календарь) текущую дату,
    //вызывая на ней предварительно нашу корректирующую функцию
	$('#find-container #calendarFrom, #find-container #calendarTo')
		.val(new Date().toDateInputValue());
	//активируем элементы ввода Дата (Календарь)
	$('#find-container #calendarFrom, #find-container #calendarTo').datepicker({
    	'format':'dd-mm-yyyy'
    	, 'setDefaultDate':true
    	, 'autoClose':true
	});
	
	/*$('input#country-input').autocomplete({
      data: {
        "USA": null,
        "Россия": null,
        "Украина": null
      },
    });*/

    /*$('input#city-input').autocomplete({
      data: {
        "Киев": null,
        "Львов": null,
        "Мариуполь": null
      },
    });*/
	
	app.handler(function() {

		//console.log('this ' + $(this));
		//var $container = $(this).find("#page-container");
		//console.log('container ' + $container);

		return function(params) {

			//Пустые объекты для хранения данных автодолнения
			//выбора страны и города, которые будут приходить с сервера 
			var countryAutocompleteItems = {};
			var cityAutocompleteItems = {};
			
			var titleAutocompleteItems = {};
			
			var windowWidth = $(window).width();
			var offerLimitDefault = 2;
			if(windowWidth > 1200){
				offerLimitDefault = 3;
			} else {
				offerLimitDefault = 2;
			}
			/*if(windowWidth <= 600){
				offerLimitDefault = 2;
			} else if(windowWidth <= 992){
				offerLimitDefault = 2;
			} else if(windowWidth <= 1200){
				offerLimitDefault = 3;
			}*/
			//console.log(windowWidth);
			//console.log(offerLimitDefault);
			//Начальные настройки бесконечной прокрутки предложений
			var cursorString = null;
		    var offerLimit = offerLimitDefault;
		    var offerCounter = 0;
		    var offerGridPopulating = false;
		    var offerDetailsOrientation = "horizontal";
		    if(windowWidth <= 600){
		    	offerDetailsOrientation = "";
			}
		    
		    $('#offer-grid-container > div').html(noItemsImage);
		    
		    //Функция сброса бесконечной прокрутки предложений
		    //в начальное состояние
			function resetInfinityScrollInfo(){
				
				offerLimit = offerLimitDefault;
			    offerCounter = 0;
			    offerGridPopulating = false;
			    cursorString = null;
			    if(windowWidth <= 600){
			    	offerDetailsOrientation = "";
				}
			    
			    $('#offer-grid-container > div').html(noItemsImage);
			}
			//resetInfinityScrollInfo();
			//Настройка календарей - верхней и нижней границ временного диапазона
			
			
			//Получаем с сервера все типы событий
			//и заполняем ими раздел "категрии" в боковой панели
			$.ajax({
				type: 'POST',
				url: '/offertype?action=get-all',
				dataType: 'json',
				cache: false
			}).done(function(responseText, textStatus, jqXHR) {
				  
				//console.log(responseText);
				//Готовим шаблон списка при помощи библиотеки Hogan
	            var template = Hogan.compile(
	                '{{#result}}'
	                +'<p>'
						+'<label for="{{id}}">'
							+'<input id="{{id}}" type="checkbox" /><span>{{description}}</span>'
						+'</label>'
					+'</p>'
					+'{{/result}}'
	            );
	            //Заполняем шаблон данными и помещаем на веб-страницу
				$('#categories').html(template.render(responseText));
				
			}).fail(function(jqXHR, textStatus, errorThrown) {
				  
				alert("Ошибка: " + jqXHR);
			}).always(function() {
			    
				preloaderOff();
		  	});
			
			/* Filter: country n city autocomplete */
			
			var onCountryAutocompleteCallback = function(){

				console.log("country autocompleted");
				resetInfinityScrollInfo();
		    	doFilter();
			};
			
			var onCityAutocompleteCallback = function(){

				console.log("city autocompleted");
				resetInfinityScrollInfo();
		    	doFilter();
			};
			
			var onTitleAutocompleteCallback = function(){

				//console.log("title autocompleted: " + $('#find-container input#search').val());
				resetInfinityScrollInfo();
				/*doFilter({
	                'order-by': $('form#order-rules input[type=radio]:checked').attr('id')
				});*/
				doFilter();
			}
			
			//country autocomplete
		    $('input#country-input').autocomplete({
		        data: countryAutocompleteItems
		        , onAutocomplete: onCountryAutocompleteCallback
			});
			
		    var countryAutocomplete =
		    	M.Autocomplete.getInstance($('input#country-input'));
			
			$('input#country-input').keydown(function(e) { 
					
				// only user-triggered event
				 if (e.originalEvent) {
					 $('input#city-input').val("");
					 $.ajax({
					        url: "/country",
					        type: "POST",
					        data: {
					            'action': 'autocomplete'
					            , 'substring': $('input#country-input').val()
					        },
					        cache : false
					    }).done(function(newAutocompleteItems) {
					    	
					    	var newAutocompleteItemsObj =
					    		newAutocompleteItems.result.reduce(function(acc, cur, i) {
					  		  		acc[cur] = null;
					  		  		return acc;
					  			}, {});
					    	countryAutocomplete.updateData(newAutocompleteItemsObj);
					    	//
					    	console.log(countryAutocomplete);
					    	countryAutocomplete.open();
					    	//$('input#country-input').keydown();
					    	/*if(typeof countryAutocomplete.open === 'function') {
					    		
					    		countryAutocomplete.open();
					    	}*/
					});
				 }
				 else {
				   // code-triggered event
					 //$('input#country-input').keyup();
				 }
			});
			
			//city autocomplete
		    $('input#city-input').autocomplete({
		        data: cityAutocompleteItems
		        , onAutocomplete: onCityAutocompleteCallback
			});
			
		    var cityAutocomplete =
		    	M.Autocomplete.getInstance($('input#city-input'));
			
			$('input#city-input').keydown(function(e) { 
					
				// only user-triggered event
				 if (e.originalEvent) {
				 	
					 $.ajax({
					        url: "/city",
					        type: "POST",
					        data: {
					            'action': 'autocomplete'
				            	, 'country': $('input#country-input').val()
					            , 'substring': $('input#city-input').val()
					        },
					        cache : false
					    }).done(function(newAutocompleteItems) {
					    	
					    	var newAutocompleteItemsObj =
					    		newAutocompleteItems.result.reduce(function(acc, cur, i) {
					  		  		acc[cur] = null;
					  		  		return acc;
					  			}, {});
					    	cityAutocomplete.updateData(newAutocompleteItemsObj);
					    	console.log(cityAutocomplete);
							
					    	cityAutocomplete.open();
					    	
					    	//$('input#city-input').keydown();
					});
				 }
				 else {
				   // code-triggered event
					 //$('input#city-input').keyup();
				 }
			});
			
			//search by title autocomplete
		    $('#find-container input#search').autocomplete({
		        data: titleAutocompleteItems
		        , onAutocomplete: onTitleAutocompleteCallback
			});
			
		  	//get created Autocomplete Instance from search-input
		    var titleAutocomplete =
		    	M.Autocomplete.getInstance($('#find-container input#search'));
		  	
		  	//handler for search-input keydown event
		    $('#find-container input#search').keydown(function(e) { 
				
				// only user-triggered event
				 if (e.originalEvent) {
					 
					 //Если нажата клавиша "Ввод" - отправить запрос на получение
					 //диапазона предложений для сетки,
					 //иначе - на получение вариантов автодополнения
					 if(e.keyCode == 13){
						 
						resetInfinityScrollInfo();
						/*doFilter({
				             'order-by': $('form#order-rules input[type=radio]:checked').attr('id')
						});*/
						doFilter();
						return false;
					 }
					 //Собираем отформатированные даты из элементов Календарь
		        	 var dateFrom = $('#find-container #calendarFrom').val();
		        	 var dateTo = $('#find-container #calendarTo').val();
					 //request data for search input's Autocomplete
					 $.ajax({
					        url: "/offer",
					        type: "POST",
					        data: {
					            'action': 'autocomplete'
					            , 'projection' : 'title'
					            , 'startstring': $('#find-container input#search').val()
					            , 'created-date-from' : dateFrom
			        			, 'created-date-to' : dateTo
					        },
					        cache : false
					    }).done(function(newAutocompleteItems) {
					    	
					    	var newAutocompleteItemsObj =
					    		newAutocompleteItems.result.reduce(function(acc, cur, i) {
					  		  		acc[cur] = null;
					  		  		return acc;
					  			}, {});
					    	titleAutocomplete.updateData(newAutocompleteItemsObj);
					    	//
					    	titleAutocomplete.open();
						});
				 }
				 else {
				 }
			});
		  	
		    $('#search-form i').unbind('click');
		  	$('#search-form i').click(function(ev) {
		  		
		  		resetInfinityScrollInfo();
				doFilter();
		  	});
						
			/* Offers grid */
			
			var populateOffersGrid = function(filterData){
		    	
				//Добавляем на место таблицы полосу бесконечного прогресса -
				//пока будет ожидаться ответ сервера
		        preloaderOn("nocover");
				//Собираем отформатированные даты из элементов Календарь
		        var dateFrom = $('#find-container #calendarFrom').val();
		        var dateTo = $('#find-container #calendarTo').val();
		        //
		        var searchByTitleStart = $('#find-container input#search').val();
		        //Составляем строку запроса на сервер
		        //для получения отфильтрованных данных о заданиях
		        var urlString =
		        	"/offer?action=get-range"
		        			+ "&limit=" + offerLimit
		        			+ "&created-date-from=" + dateFrom
		        			+ "&created-date-to=" + dateTo
		        			+ ((searchByTitleStart != "") ? ("&substring=" + searchByTitleStart) : "")
		        			+ ((cursorString != null) ? ("&cursor=" + cursorString) : "");
		      	//+"&order-by=sort-created-desc"
				
		    	$.ajax({
		            url: urlString,
		            type: "POST",
		            data: filterData,
		            cache : false
		        }).done(function(data) {
		            
		            //помещаем на веб-страницу
		            //$('#events-container').html(data);
		            
		        	fetchedCount = data.result[0].items.length;
		        	if(data.result[0].cursor_str != "end" && fetchedCount > 0){
		        		
		        		cursorString = data.result[0].cursor_str;
		        		if(offerCounter == 0 && fetchedCount > 0){
		        			$('#offer-grid-container > div').html('');
		        		}
		        		offerCounter += fetchedCount;
		        		var offerCounterTail = offerCounter % offerLimitDefault;
		        		if(offerCounterTail != 0 && offerLimit == offerLimitDefault){
			        		
			        		offerLimit += offerLimitDefault - offerCounterTail;
			        		
			        	} else if(offerLimit != offerLimitDefault) {
			        		
			        		offerLimit = offerLimitDefault;
			        	}

		        		//if(fetchedCount > 0){
				            //Готовим шаблон offer grid item при помощи библиотеки Hogan
						  	var template = Hogan.compile(
					  			'{{#items}}'
				                +'<div class="col s12 m12 l6 xl4">'
					                +'<div class="card hoverable {{offer_type}}">'
					                    +'<div class="card-image">'
					                      +'<img src="{{image}}">'
					                      +'<div class="card-title">'
					                      	+'<div>{{title}}</div>'
					                      	+'<div>({{offer_type}})</div>'
					                      	+'<div class="card-title-date">{{created_at}}</div>'
					                      +'</div>'
					                    +'</div>'
					                    +'<div class="card-content">'
					                      +'<p>{{content_preview}}</p>'
					                    +'</div>'
					                    +'<div class="card-action">'
					                      +'<a data-offerid="{{id}}" class="modal-trigger" href="#offer-details">Details...</a>'
					                    +'</div>'
					                  +'</div>'
					            +'</div>'
					      		+ '{{/items}}'
					  		);
						  	//Заполняем шаблон данными и помещаем на веб-страницу
							$('#offer-grid-container > div').append(template.render(data.result[0]));
						  	//
							$('#find-container #pointer-down').css('display', 'block');
						//}

				  		/*//Расцветка для разных состояний заказа, классы цветов определены в файле стилей
			            $("table td:contains('забронирован')").parent().addClass("BlueRow");
			            $("table td:contains('выполнен')").parent().addClass("GreenRow");
			            //$("table td:contains('отменен')").parent().addClass("RedRow");
			            //Блокируем кнопки работы со строками таблицы, пока не будет выбрана строка
			            $("#doneOrder, #cancelOrder, #deleteOrder").attr('disabled', '');
			            //Устанавливаем обработчик кликов на все строки таблицы кроме заголовка
			            $("table tr:not(:first)").unbind("click");
			            $("table tr:not(:first)").click(function(){

			                //Разблокируем кнопки, когда выбрана строка таблицы
			                $("#doneOrder, #cancelOrder, #deleteOrder").removeAttr('disabled');
			                //Отмечаем текст выбранной строки зеленым цветом, с остальных строк выделение убираем
			                //(оно могло быть ранее установлено на одну из строк)
			                $(this).addClass("selectedTableRow").siblings().removeClass("selectedTableRow");
			            });
			            //Очищаем списки в форме
			            $('#manicurists-select select')
			                .find('option')
			                .remove();

			            $('#time-select select')
			                .find('option')
			                .remove();
			            //Отключаем элементы ввода в форме
			            $('#time-select select').attr('disabled', '');
			            $('form#create-order button').attr('disabled', '');
			            //Заполняем список выбора мастеров
			            populateManicuristsList();
			            //Активируем список выбора времени
			            $('#time-select select').formSelect();*/
		        	} else {
		        		
		        		$('#find-container #pointer-down').css('display', 'none');
		        		offerCounter = "full";
		        	}
		        	//preloaderOff();
		        	offerGridPopulating = false;
		        }).fail(function(jqXHR, textStatus, errorThrown) {
					  
					alert("Ошибка: " + jqXHR);
				}).always(function() {
				    
					preloaderOff();
			  	});
			}

			/* Filter */
			
			var doFilter = function(){

				var filterData =
					{'order-by': $('form#order-rules input[type=radio]:checked').attr('id')};
		  		
		  		var countryName = $('form#filters input#country-input').val();
		  		var cityName = $('form#filters input#city-input').val();
		  		var collaboratorsCount = $('form#filters input#c-count-input').val();
		  		
		  		if(countryName != ""){
		  			filterData['country'] = countryName;
		  		}
		  		if(cityName != ""){
		  			filterData['city'] = cityName;
		  		}
		  		if($('form#filters input#c-count-on-off').is(':checked')){
			  		if(collaboratorsCount != ""){
			  			filterData['c-count'] = collaboratorsCount;
			  		} else {
			  			filterData['c-count'] = -1;
			  		}
		  		}
		  		var categoriesArray = new Array();
		  		$("form#categories input:checked").each(function() {
		  			categoriesArray.push($(this).attr('id'));
		  		});
		  		if(categoriesArray.length > 0){
		  			filterData["categories"] = categoriesArray;
		  		}
		  		
				populateOffersGrid(filterData);
			}
			
			//Apply the filter
			/*doFilter({
                'order-by': $('form#order-rules input[type=radio]:checked').attr('id')
			});*/
			doFilter();
			
			//обработчик выбора одного из чекбоксов сортировки
			$('form#order-rules input[type=radio]').unbind("change");
			$('form#order-rules input[type=radio]').change(function() {

			    if(this.checked) {
					
			    	resetInfinityScrollInfo();
			    	/*doFilter({
		                'order-by': $('form#order-rules input[type=radio]:checked').attr('id')
					});*/
			    	doFilter();
			    }
			});
			
			//обработчик выбора одного из чекбоксов фильтра по категориям (типам предложений)
			$('form#categories input[type=checkbox]').unbind("click");
			$('form#categories input[type=checkbox]').click(function() {

		    	resetInfinityScrollInfo();
		    	doFilter();
			});
			
			//обработчики изменений фильтра по текущему числу вакантных мест в предложении
			$('form#filters input#c-count-input').unbind("change");
			$('form#filters input#c-count-input').change(function() {

				if($('form#filters input#c-count-on-off').is(':checked')) {
			    	resetInfinityScrollInfo();
			    	doFilter();
				}
			});
			//обработчик изменений фильтра по текущему числу вакантных мест в предложении
			$('form#filters input#c-count-on-off').unbind("change");
			$('form#filters input#c-count-on-off').change(function() {

		    	resetInfinityScrollInfo();
		    	doFilter();
			});
			
			/* Date range */
			
			var onDateRangeChanged = function(){

				if(!offerGridPopulating){
					
	    			resetInfinityScrollInfo();
	    			/*doFilter({
		                'order-by': $('form#order-rules input[type=radio]:checked').attr('id')
					});*/
	    			doFilter();
    			} else {
    				
    				setTimeout(onDateRangeChanged, 100);
    			}
			}
			
			$(document).unbind("change");
			$(document).on(
		    		'change'
		    		, '#find-container #calendarFrom, #find-container #calendarTo'
		    		, onDateRangeChanged);
			
			/* Grid infinity scroll */
			
			var onScroll = function(){

				if(offerCounter != "full" && !offerGridPopulating){
					
					var footerHeight = 283;
					if ($(window).scrollTop() >=
							($(document).height()
								- footerHeight
								- $(window).height())) {
						offerGridPopulating = true;  
						/*doFilter({
			                'order-by': $('form#order-rules input[type=radio]:checked').attr('id')
						});*/
						doFilter();
				    }
				}
			}
			
			var onClickNext = function(){

				if(offerCounter != "full" && !offerGridPopulating){

					offerGridPopulating = true;  
					/*doFilter({
		                'order-by': $('form#order-rules input[type=radio]:checked').attr('id')
					});*/
					doFilter();
				} else if(offerCounter == "full"){
					
					$('#find-container #pointer-down').css('display', 'none');
				}
			}
			
			$(window).unbind("scroll");
			$(window).scroll(onScroll);
			
			$('#find-container #pointer-down').unbind("click");
			$('#find-container #pointer-down').click(onClickNext);
			
			/* Offer details modal */
			
			$(document).unbind("click");
			$(document).on(
		    		'click'
		    		, '#offer-grid-container .card-action > a'
		    		, function(){
		    			
		    			preloaderOn("nocover");
		    			var id = $(this).data('offerid');
		    			
		    			var urlString =
				        	"/offer?action=get"
				        			+"&id=" + id
				        			+"&projection=grid-item-details";
		    			$.ajax({
				            url: urlString,
				            type: "POST",
				            cache : false
				        }).done(function(data) {
				        	
				        	var template = Hogan.compile(
						  			
					      		'<h3 class="header">{{title}}</h3>'
					      		+ '<h4>({{offer_type}})</h4>'
					      	    + '<div class="card ' + offerDetailsOrientation + '">'
					      	      +'<div class="card-image details-image">'
					      	        +'<img src="{{image}}">'
					      	      +'</div>'
					      	      +'<div class="card-stacked">'
					      	        +'<div class="card-content">'
					      	      		+ '<h4>Подробности</h4>'
					      	      		+'<p>'
					      	      			+'<strong>Автор: </strong>{{author_name}} '
					      	      			+'{{#subscription}}'
						      	      			+'<button id="unsubscribe" data-author-id="{{author_id}}" class="waves-effect waves-light btn" type="button">'
						      	      				+'Отписаться'
					      	      				+'</button>'
					      	      			+'{{/subscription}}'
						      	      		+'{{^subscription}}'
						      	      			+'<button id="subscribe" data-author-id="{{author_id}}" class="waves-effect waves-light btn" type="button">'
						      	      				+'Подписаться'
					      	      				+'</button>'
					      	      			+'{{/subscription}}'
				      	      			+'</p>'
					      	      		+'<p><strong>Состояние </strong>{{state}}</p>'
					      	      		+'<p><strong>Создано: </strong>{{created_at}}</p>'
					      	      		+'<p><strong>Страна: </strong>{{country}}</p>'
					      	      		+'<p><strong>Город: </strong>{{city}}</p>'
					      	      		+ '<h4>Описание</h4>'
					      	          	+'<p>{{content}}</p>'
					      	        +'</div>'
					      	        +'<div class="card-action">'
					      	          +'<a href="{{id}}"><h4>Join</h4></a>'
					      	        +'</div>'
					      	      +'</div>'
					      	    +'</div>'
					  		);
				        	
				        	$('#offer-details .modal-content')
				        		.html(template.render(data.result[0]));
				        	
				        	var $currentSubscribeButton = null;
				        	
				        	//Обработчик клика по кнопке "Подписаться"
				        	var subscribeHandler = function(ev){
			        			
			        			ev.preventDefault();
			        			preloaderOn("nocover");
								var createSubscriptionUrlString =
						        	"/subscription?action=create"
						        			+"&author-id=" + $(this).data("authorId");
								$.ajax({
						            url: createSubscriptionUrlString,
						            type: "POST",
						            cache : false
						        }).done(function(data) {
						        	
						        	if(data.result != null && data.result[0] == "created"){
						        		
						        		$currentSubscribeButton.attr('id', 'unsubscribe');
						        		$currentSubscribeButton.text('Отписаться');
						        		$currentSubscribeButton.unbind("click");
						        		$currentSubscribeButton.click(unsubscribeHandler);
						        	} else {
						        		alert('Ошибка отправки запроса');
						        	}
						        }).fail(function(jqXHR, textStatus, errorThrown) {
									  
									alert("Ошибка отправки запроса: " + jqXHR);
								}).always(function() {
								    
									preloaderOff();
							  	});
			        		}
				        	
				        	//Обработчик клика по кнопке "Отписаться"
				        	var unsubscribeHandler = function(ev){
			        			
			        			ev.preventDefault();
			        			preloaderOn("nocover");
								var deleteSubscriptionUrlString =
						        	"/subscription?action=delete"
						        			+"&author-id=" + $(this).data("authorId");
								$.ajax({
						            url: deleteSubscriptionUrlString,
						            type: "POST",
						            cache : false
						        }).done(function(data) {
						        	
						        	if(data.result != null && data.result[0] == "deleted"){
						        		
						        		$currentSubscribeButton.attr('id', 'subscribe');
						        		$currentSubscribeButton.text('Подписаться');
						        		$currentSubscribeButton.unbind("click");
						        		$currentSubscribeButton.click(subscribeHandler);
						        	} else {
						        		alert('Ошибка отправки запроса');
						        	}
						        }).fail(function(jqXHR, textStatus, errorThrown) {
									  
									alert("Ошибка отправки запроса: " + jqXHR);
								}).always(function() {
								    
									preloaderOff();
							  	});
			        		}
				        	
				        	var $subscribeButton =
				        		$('#offer-details .modal-content .card-content button#subscribe');
				        	if($subscribeButton.length > 0){
				        		
				        		$currentSubscribeButton = $subscribeButton;
				        		$subscribeButton.unbind("click");
				        		$subscribeButton.click(subscribeHandler);
				        	}
				        	
				        	var $unsubscribeButton =
				        		$('#offer-details .modal-content .card-content button#unsubscribe');
				        	if($unsubscribeButton.length > 0){
				        		
				        		$currentSubscribeButton = $unsubscribeButton;
				        		$unsubscribeButton.unbind("click");
				        		$unsubscribeButton.click(unsubscribeHandler);
				        	}
				        	
				        	//Обработчик клика по ссылке "Присоединиться"
				        	$('#offer-details .modal-content .card-action > a').unbind("click");
							$('#offer-details .modal-content .card-action > a').click(function(ev){
								
								ev.preventDefault();
								preloaderOn("nocover");
								var urlString =
						        	"/offer?action=join"
						        			+"&id=" + data.result[0].id;
								$.ajax({
						            url: urlString,
						            type: "POST",
						            cache : false
						        }).done(function(data) {
						        	
						        	if(data.result[0] == "sent"){
						        		$('#offer-details .modal-content .card-action')
						        			.html('<p>Запрос отправлен автору задачи на электронную почту. Если через некоторое время он не пришлет Вам ответное письмо - можете повторить отправку или связаться с ним напрямую по адресу, указанному в описании задачи</p>');
						        	} else {
						        		alert('Ошибка отправки запроса');
						        	}
						        }).fail(function(jqXHR, textStatus, errorThrown) {
									  
									alert("Ошибка отправки запроса: " + jqXHR);
								}).always(function() {
								    
									preloaderOff();
							  	});
							});
				        }).fail(function(jqXHR, textStatus, errorThrown) {
							  
							alert("Ошибка: " + jqXHR);
						}).always(function() {
						    
							preloaderOff();
					  	});;
		    		});

			setTimeout(preloaderOff, 500);
		};
	});
</script>